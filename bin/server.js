// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var Hapi, Server, badRequest, createReqPayload, isTruthy, join, ref;

  Hapi = require('hapi');

  badRequest = require('boom').badRequest;

  join = require('path').join;

  ref = require('./payload'), isTruthy = ref.isTruthy, createReqPayload = ref.create;

  Server = (function() {
    function Server() {
      this.server = new Hapi.Server();
      this.server.connection({
        host: '0.0.0.0',
        port: process.env.PORT || 4545
      });
      this.server.on('request-error', function(req, err) {
        return console.log('Internal Server Error:', err);
      });
      this._names();
    }

    Server.prototype._names = function() {
      return this.server.route({
        method: 'GET',
        path: '/names',
        handler: (function(_this) {
          return function(req, reply) {
            if (!_this.snippetNames) {
              return reply(badRequest('Server Has not been started!'));
            }
            return reply(_this.snippetNames);
          };
        })(this)
      });
    };


    /*
    The required path is relative to this module...
     */

    Server.prototype._configure = function(context, path) {
      this.requiredFile = context.require(path);
      this.snippetNames = Object.keys(this.requiredFile);
      return this._setupRoutes();
    };

    Server.prototype._setupRoutes = function() {
      if (isTruthy(process.env['LOCAL_TESTING'])) {
        return this.server.route({
          method: ['PUT', 'POST', 'GET'],
          path: '/v1/app/{appid}/run/{name}',
          handler: (function(_this) {
            return function(old_req, reply) {
              var req, snippet;
              snippet = _this.requiredFile[old_req.params.name];
              if (!snippet) {
                return reply(badRequest('Snippet Not Found!'));
              }
              req = createReqPayload(old_req);
              return snippet(req, reply);
            };
          })(this)
        });
      } else {
        return this.server.route({
          method: ['PUT', 'POST', 'GET'],
          path: '/code/{name}',
          handler: (function(_this) {
            return function(req, reply) {
              var snippet;
              snippet = _this.requiredFile[req.params.name];
              if (!snippet) {
                return reply(badRequest('Snippet Not Found!'));
              }
              return snippet(req, reply);
            };
          })(this)
        });
      }
    };

    Server.prototype.start = function(context, path, cb) {
      if (!path) {
        throw Error('No Path Given!');
      }
      this._configure(context, path);
      return this.server.start(function(err) {
        if (cb) {
          return cb(err);
        }
      });
    };

    return Server;

  })();

  module.exports = new Server();

}).call(this);
